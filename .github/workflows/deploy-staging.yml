name: Deploy to Staging (TestFlight/Internal Testing)

permissions:
  contents: write  # Allow pushing tags

on:
  # Trigger on staging tags (e.g., v1.8.0-beta.1) or push to develop branch
  push:
    tags:
      - 'v*-beta.*'
      - 'v*-rc.*'
    branches:
      - develop
  
  # Allow manual triggering from GitHub UI
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to deploy (ios, android, all)'
        required: true
        # temporary until we get google play account setup
        default: 'ios'
        type: choice
        options:
          - ios
          - android
          - all

jobs:
  deploy-staging:
    name: Deploy to Staging
    uses: ./.github/workflows/build-and-submit.yml
    with:
      profile: 'preview'
      platform: ${{ github.event.inputs.platform || 'ios' }}
      environment: 'staging'
    secrets:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  
  promote-gate:
    name: Approve for Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production-approval
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    outputs:
      staging_tag: ${{ steps.extract.outputs.staging_tag }}
      should_promote: ${{ steps.extract.outputs.should_promote }}
      is_branch: ${{ steps.extract.outputs.is_branch }}
      platform: ${{ steps.platform.outputs.platform }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract platform selection
        id: platform
        run: |
          # Get platform from manual trigger or default to 'ios'
          PLATFORM="${{ github.event.inputs.platform || 'ios' }}"
          echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
          echo "📱 Platform: $PLATFORM"
      
      - name: Determine staging tag
        id: extract
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tag-based deployment
            STAGING_TAG="${GITHUB_REF#refs/tags/}"
            echo "is_branch=false" >> $GITHUB_OUTPUT
            echo "🏷️  Using existing staging tag: $STAGING_TAG"
          else
            # Branch-based deployment - auto-bump version
            echo "is_branch=true" >> $GITHUB_OUTPUT
            
            # Get the latest production tag (vX.Y.Z format, no beta/rc)
            LATEST_TAG=$(git tag -l 'v*' | grep -v -E '(beta|rc)' | sort -V | tail -n1)
            
            if [ -z "$LATEST_TAG" ]; then
              # No existing tags, start at v1.0.0
              NEW_VERSION="v1.0.0"
            else
              # Extract version numbers (v1.9.0 -> 1 9 0)
              VERSION_NUM="${LATEST_TAG#v}"
              MAJOR=$(echo $VERSION_NUM | cut -d. -f1)
              MINOR=$(echo $VERSION_NUM | cut -d. -f2)
              PATCH=$(echo $VERSION_NUM | cut -d. -f3)
              
              # Bump minor version, reset patch to 0
              MINOR=$((MINOR + 1))
              NEW_VERSION="v${MAJOR}.${MINOR}.0"
            fi
            
            # Create staging tag with -beta.1 suffix
            STAGING_TAG="${NEW_VERSION}-beta.1"
            
            echo "📊 Latest production tag: ${LATEST_TAG:-none}"
            echo "🆕 New version: $NEW_VERSION"
            echo "🏷️  Staging tag: $STAGING_TAG"
          fi
          
          echo "staging_tag=$STAGING_TAG" >> $GITHUB_OUTPUT
          echo "should_promote=true" >> $GITHUB_OUTPUT
      
      - name: Create staging tag for branch deployment
        if: steps.extract.outputs.is_branch == 'true'
        run: |
          STAGING_TAG="${{ steps.extract.outputs.staging_tag }}"
          
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create and push staging tag
          git tag -a "$STAGING_TAG" -m "Auto-generated staging tag from ${{ github.ref_name }}"
          git push origin "$STAGING_TAG"
          
          echo "✅ Created staging tag: $STAGING_TAG"
      
      - name: Ready to promote
        run: |
          echo "### ✅ Staging Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.extract.outputs.is_branch }}" = "true" ]; then
            echo "Branch **${{ github.ref_name }}** has been deployed to TestFlight." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Auto-generated staging tag: **${{ steps.extract.outputs.staging_tag }}**" >> $GITHUB_STEP_SUMMARY
          else
            echo "Staging tag **${{ steps.extract.outputs.staging_tag }}** has been deployed to TestFlight." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platform**: ${{ steps.platform.outputs.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🧪 **Test the staging build**, then approve this step to promote to production." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Production tag will be: **$(echo ${{ steps.extract.outputs.staging_tag }} | sed -E 's/-beta\.[0-9]+$//' | sed -E 's/-rc\.[0-9]+$//')**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ _Production will deploy to the same platform(s) as staging: **${{ steps.platform.outputs.platform }}**_" >> $GITHUB_STEP_SUMMARY
  
  promote-to-production:
    name: Promote to Production
    needs: promote-gate
    if: needs.promote-gate.outputs.should_promote == 'true'
    uses: ./.github/workflows/promote-to-production.yml
    with:
      staging_tag: ${{ needs.promote-gate.outputs.staging_tag }}
      platform: ${{ needs.promote-gate.outputs.platform }}
    secrets: inherit

