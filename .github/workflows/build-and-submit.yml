name: Build and Submit (Reusable)

on:
  workflow_call:
    inputs:
      profile:
        description: 'Build profile to use (preview, production)'
        required: true
        type: string
      platform:
        description: 'Platform to deploy (ios, android, all)'
        required: false
        default: 'all'
        type: string
      environment:
        description: 'GitHub environment name for deployment protection'
        required: false
        type: string
    secrets:
      APP_STORE_CONNECT_API_KEY_ID:
        required: true
      APP_STORE_CONNECT_ISSUER_ID:
        required: true
      APP_STORE_CONNECT_API_KEY_CONTENT:
        required: true
      APPLE_ID:
        required: true
      MATCH_PASSWORD:
        required: true
      MATCH_GIT_BASIC_AUTHORIZATION:
        required: true
      GOOGLE_PLAY_SERVICE_ACCOUNT_JSON:
        required: true
      ANDROID_KEYSTORE_BASE64:
        required: true
      ANDROID_KEYSTORE_PASSWORD:
        required: true
      ANDROID_KEY_ALIAS:
        required: true
      ANDROID_KEY_PASSWORD:
        required: true

jobs:
  build-ios:
    name: Build and Submit iOS
    if: inputs.platform == 'ios' || inputs.platform == 'all'
    runs-on: macos-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Configure Git Authentication for Match
        env:
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
        run: |
          # Decode username:token from base64
          decoded=$(echo "$MATCH_GIT_BASIC_AUTHORIZATION" | base64 --decode)
          username=$(echo "$decoded" | cut -d: -f1)
          token=$(echo "$decoded" | cut -d: -f2)
          
          # Configure git to use token authentication for GitHub
          git config --global url."https://${username}:${token}@github.com/".insteadOf "https://github.com/"
          
          echo "âœ… Git configured for Fastlane Match"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup App Store Connect API Key
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          # Use echo -e to interpret escape sequences (\n) in the key content
          echo -e "${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}" > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
          echo "APP_STORE_CONNECT_API_KEY_PATH=$HOME/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8" >> $GITHUB_ENV
          echo "APP_STORE_CONNECT_API_KEY_KEY_ID=${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" >> $GITHUB_ENV
          echo "APP_STORE_CONNECT_API_KEY_ISSUER_ID=${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" >> $GITHUB_ENV

      - name: Run Expo Prebuild for iOS
        run: npx expo prebuild --platform ios --clean

      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      - name: Bundle JavaScript with Expo (iOS)
        if: inputs.profile == 'preview'
        env:
          # Staging environment variables - Expo will bake these into the bundle
          EXPO_PUBLIC_FIREBASE_API_KEY: ${{ secrets.EXPO_PUBLIC_FIREBASE_API_KEY_STAGING }}
          EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN_STAGING }}
          EXPO_PUBLIC_FIREBASE_DATABASE_URL: ${{ secrets.EXPO_PUBLIC_FIREBASE_DATABASE_URL_STAGING }}
          EXPO_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_PROJECT_ID_STAGING }}
          EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET_STAGING }}
          EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID_STAGING }}
          EXPO_PUBLIC_FIREBASE_APP_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_APP_ID_STAGING }}
          EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID_STAGING }}
          EXPO_PUBLIC_FIREBASE_FUNCTIONS_URL: ${{ secrets.EXPO_PUBLIC_FIREBASE_FUNCTIONS_URL_STAGING }}
          EXPO_PUBLIC_USE_FIREBASE_EMULATOR: ${{ secrets.EXPO_PUBLIC_USE_FIREBASE_EMULATOR_STAGING }}
          EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID_STAGING }}
          EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID_STAGING }}
          EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID_STAGING }}
          EXPO_PUBLIC_GOOGLE_EXPO_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_EXPO_CLIENT_ID_STAGING }}
          EXPO_PUBLIC_ENABLE_DEV_FEATURES: ${{ secrets.EXPO_PUBLIC_ENABLE_DEV_FEATURES_STAGING }}
        run: |
          echo "ðŸ“¦ Bundling JavaScript for iOS (staging)..."
          npx expo export:embed --eager --platform ios --dev false
          echo "âœ… iOS JavaScript bundle created with staging environment variables"

      - name: Bundle JavaScript with Expo (iOS Production)
        if: inputs.profile == 'production'
        env:
          # Production environment variables - Expo will bake these into the bundle
          EXPO_PUBLIC_FIREBASE_API_KEY: ${{ secrets.EXPO_PUBLIC_FIREBASE_API_KEY_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_DATABASE_URL: ${{ secrets.EXPO_PUBLIC_FIREBASE_DATABASE_URL_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_PROJECT_ID_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_APP_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_APP_ID_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_FUNCTIONS_URL: ${{ secrets.EXPO_PUBLIC_FIREBASE_FUNCTIONS_URL_PRODUCTION }}
          EXPO_PUBLIC_USE_FIREBASE_EMULATOR: ${{ secrets.EXPO_PUBLIC_USE_FIREBASE_EMULATOR_PRODUCTION }}
          EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID_PRODUCTION }}
          EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID_PRODUCTION }}
          EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID_PRODUCTION }}
          EXPO_PUBLIC_GOOGLE_EXPO_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_EXPO_CLIENT_ID_PRODUCTION }}
          EXPO_PUBLIC_ENABLE_DEV_FEATURES: ${{ secrets.EXPO_PUBLIC_ENABLE_DEV_FEATURES_PRODUCTION }}
        run: |
          echo "ðŸ“¦ Bundling JavaScript for iOS (production)..."
          npx expo export:embed --eager --platform ios --dev false
          echo "âœ… iOS JavaScript bundle created with production environment variables"

      - name: Build and Submit to TestFlight (Preview)
        if: inputs.profile == 'preview'
        env:
          # Secrets
          APPLE_ID: ${{ secrets.APPLE_ID }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APP_STORE_CONNECT_API_KEY_PATH: ${{ env.APP_STORE_CONNECT_API_KEY_PATH }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID }}
          # App Configuration (from GitHub Variables)
          IOS_APP_IDENTIFIER: ${{ vars.IOS_APP_IDENTIFIER }}
          IOS_TEAM_ID: ${{ vars.IOS_TEAM_ID }}
          IOS_SCHEME: ${{ vars.IOS_SCHEME }}
          IOS_WORKSPACE_PATH: ${{ vars.IOS_WORKSPACE_PATH }}
          IOS_PROJECT_PATH: ${{ vars.IOS_PROJECT_PATH }}
          IOS_OUTPUT_NAME: ${{ vars.IOS_OUTPUT_NAME }}
          CI: true
        run: bundle exec fastlane ios beta

      - name: Build and Submit to App Store (Production)
        if: inputs.profile == 'production'
        env:
          # Secrets
          APPLE_ID: ${{ secrets.APPLE_ID }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APP_STORE_CONNECT_API_KEY_PATH: ${{ env.APP_STORE_CONNECT_API_KEY_PATH }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID }}
          # App Configuration (from GitHub Variables)
          IOS_APP_IDENTIFIER: ${{ vars.IOS_APP_IDENTIFIER }}
          IOS_TEAM_ID: ${{ vars.IOS_TEAM_ID }}
          IOS_SCHEME: ${{ vars.IOS_SCHEME }}
          IOS_WORKSPACE_PATH: ${{ vars.IOS_WORKSPACE_PATH }}
          IOS_PROJECT_PATH: ${{ vars.IOS_PROJECT_PATH }}
          IOS_OUTPUT_NAME: ${{ vars.IOS_OUTPUT_NAME }}
          CI: true
        run: bundle exec fastlane ios release

      - name: Upload iOS build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ inputs.profile }}
          path: |
            ./build/ios/*.ipa
            ./ios/fastlane/report.xml
          retention-days: 30

  build-android:
    name: Build and Submit Android
    if: inputs.platform == 'android' || inputs.platform == 'all'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run Expo Prebuild for Android
        run: npx expo prebuild --platform android --clean

      - name: Configure Dynamic Version Code
        run: |
          # Update build.gradle to read versionCode from Gradle property
          sed -i 's/versionCode [0-9]*/versionCode project.hasProperty("versionCode") ? project.property("versionCode").toInteger() : 1/' android/app/build.gradle
          echo "âœ… Configured dynamic versionCode in build.gradle"

      - name: Update Gradle Memory Settings
        run: |
          # Update JVM memory settings for large builds
          sed -i 's/org.gradle.jvmargs=.*/org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=1024m/' android/gradle.properties

      - name: Setup Android Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/release.keystore
          echo "ANDROID_KEYSTORE_PATH=${{ github.workspace }}/android/app/release.keystore" >> $GITHUB_ENV

      - name: Setup Google Play Service Account
        run: |
          echo '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}' > google-play-key.json
          echo "GOOGLE_PLAY_JSON_KEY_PATH=${{ github.workspace }}/google-play-key.json" >> $GITHUB_ENV

      - name: Bundle JavaScript with Expo (Android)
        if: inputs.profile == 'preview'
        env:
          # Staging environment variables - Expo will bake these into the bundle
          EXPO_PUBLIC_FIREBASE_API_KEY: ${{ secrets.EXPO_PUBLIC_FIREBASE_API_KEY_STAGING }}
          EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN_STAGING }}
          EXPO_PUBLIC_FIREBASE_DATABASE_URL: ${{ secrets.EXPO_PUBLIC_FIREBASE_DATABASE_URL_STAGING }}
          EXPO_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_PROJECT_ID_STAGING }}
          EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET_STAGING }}
          EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID_STAGING }}
          EXPO_PUBLIC_FIREBASE_APP_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_APP_ID_STAGING }}
          EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID_STAGING }}
          EXPO_PUBLIC_FIREBASE_FUNCTIONS_URL: ${{ secrets.EXPO_PUBLIC_FIREBASE_FUNCTIONS_URL_STAGING }}
          EXPO_PUBLIC_USE_FIREBASE_EMULATOR: ${{ secrets.EXPO_PUBLIC_USE_FIREBASE_EMULATOR_STAGING }}
          EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID_STAGING }}
          EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID_STAGING }}
          EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID_STAGING }}
          EXPO_PUBLIC_GOOGLE_EXPO_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_EXPO_CLIENT_ID_STAGING }}
          EXPO_PUBLIC_ENABLE_DEV_FEATURES: ${{ secrets.EXPO_PUBLIC_ENABLE_DEV_FEATURES_STAGING }}
        run: |
          echo "ðŸ“¦ Bundling JavaScript for Android (staging)..."
          npx expo export:embed --eager --platform android --dev false
          echo "âœ… Android JavaScript bundle created with staging environment variables"

      - name: Bundle JavaScript with Expo (Android Production)
        if: inputs.profile == 'production'
        env:
          # Production environment variables - Expo will bake these into the bundle
          EXPO_PUBLIC_FIREBASE_API_KEY: ${{ secrets.EXPO_PUBLIC_FIREBASE_API_KEY_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_DATABASE_URL: ${{ secrets.EXPO_PUBLIC_FIREBASE_DATABASE_URL_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_PROJECT_ID_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_APP_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_APP_ID_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID_PRODUCTION }}
          EXPO_PUBLIC_FIREBASE_FUNCTIONS_URL: ${{ secrets.EXPO_PUBLIC_FIREBASE_FUNCTIONS_URL_PRODUCTION }}
          EXPO_PUBLIC_USE_FIREBASE_EMULATOR: ${{ secrets.EXPO_PUBLIC_USE_FIREBASE_EMULATOR_PRODUCTION }}
          EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID_PRODUCTION }}
          EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID_PRODUCTION }}
          EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID_PRODUCTION }}
          EXPO_PUBLIC_GOOGLE_EXPO_CLIENT_ID: ${{ secrets.EXPO_PUBLIC_GOOGLE_EXPO_CLIENT_ID_PRODUCTION }}
          EXPO_PUBLIC_ENABLE_DEV_FEATURES: ${{ secrets.EXPO_PUBLIC_ENABLE_DEV_FEATURES_PRODUCTION }}
        run: |
          echo "ðŸ“¦ Bundling JavaScript for Android (production)..."
          npx expo export:embed --eager --platform android --dev false
          echo "âœ… Android JavaScript bundle created with production environment variables"

      - name: Build and Submit to Internal Testing (Preview)
        if: inputs.profile == 'preview'
        env:
          # Secrets
          ANDROID_KEYSTORE_PATH: ${{ env.ANDROID_KEYSTORE_PATH }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          GOOGLE_PLAY_JSON_KEY_PATH: ${{ env.GOOGLE_PLAY_JSON_KEY_PATH }}
          # App Configuration (from GitHub Variables)
          ANDROID_PACKAGE_NAME: ${{ vars.ANDROID_PACKAGE_NAME }}
          ANDROID_PROJECT_DIR: ${{ vars.ANDROID_PROJECT_DIR }}
        run: bundle exec fastlane android beta

      - name: Build and Submit to Production (Production)
        if: inputs.profile == 'production'
        env:
          # Secrets
          ANDROID_KEYSTORE_PATH: ${{ env.ANDROID_KEYSTORE_PATH }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          GOOGLE_PLAY_JSON_KEY_PATH: ${{ env.GOOGLE_PLAY_JSON_KEY_PATH }}
          # App Configuration (from GitHub Variables)
          ANDROID_PACKAGE_NAME: ${{ vars.ANDROID_PACKAGE_NAME }}
          ANDROID_PROJECT_DIR: ${{ vars.ANDROID_PROJECT_DIR }}
        run: bundle exec fastlane android release

      - name: Upload Android build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-build-${{ inputs.profile }}
          path: |
            ./android/app/build/outputs/bundle/release/*.aab
            ./android/app/build/outputs/apk/release/*.apk
            ./android/fastlane/report.xml
          retention-days: 30

  summary:
    name: Build Summary
    needs: [build-ios, build-android]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Build summary
        run: |
          echo "### ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Profile**: ${{ inputs.profile }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ inputs.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS Status**: ${{ needs.build-ios.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Status**: ${{ needs.build-android.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.profile }}" == "preview" ]; then
            echo "ðŸ“± **iOS**: Check TestFlight for build availability" >> $GITHUB_STEP_SUMMARY
            echo "ðŸ¤– **Android**: Check Play Console Internal Testing track" >> $GITHUB_STEP_SUMMARY
          else
            echo "ðŸ“± **iOS**: Build submitted to App Store (pending review)" >> $GITHUB_STEP_SUMMARY
            echo "ðŸ¤– **Android**: Build submitted to Play Store (pending review)" >> $GITHUB_STEP_SUMMARY
          fi
